generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @map("_id")
  email       String     @unique
  username    String     @unique
  fullname    String
  avatar      String?
  watchedTags String[]   @map("watched_tags")
  role        UserRole   @default(USER)
  status      UserStatus @default(ACTIVE)

  // Relations
  notes       Note[]   @relation("UserNotes")
  groups      Group[]  @relation("GroupMembers", fields: [groupIds], references: [id])
  groupIds    String[] @map("group_ids") @db.ObjectId
  adminGroups Group[]  @relation("GroupAdmin")
  favorites   Note[]   @relation("UserFavorites", fields: [favoriteIds], references: [id])
  favoriteIds String[] @map("favorite_ids") @db.ObjectId

  // Activity tracking
  lastLogin  DateTime?
  lastActive DateTime?

  // Notifications
  notifications Notification[] @relation("UserNotifications")

  // Settings
  settings UserSettings?

  // Audit
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("users")
}

model Note {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  description String
  thumbnail   String?
  slug        String
  isPublic    Boolean @default(false) @map("is_public")
  shareLink   String? @map("share_link")

  // Relations
  user   User   @relation("UserNotes", fields: [userId], references: [id])
  userId String @map("user_id")

  groups   Group[]  @relation("GroupNotes", fields: [groupIds], references: [id])
  groupIds String[] @map("group_ids") @db.ObjectId

  tags   Tag[]    @relation("NoteTags", fields: [tagIds], references: [id])
  tagIds String[] @map("tag_ids") @db.ObjectId

  // Favorites relation
  favoritedBy    User[]   @relation("UserFavorites", fields: [favoritedByIds], references: [id])
  favoritedByIds String[] @map("favorited_by_ids")

  // Audit
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Comprehensive Indexing Strategy
  // 1. Single-field Indexes
  @@index([title], name: "title_search_index")
  @@index([description], name: "description_search_index")
  @@index([userId], name: "user_notes_index")
  @@index([isPublic], name: "public_notes_index")
  @@index([createdAt], name: "created_at_index")
  // 2. Compound Indexes for Complex Queries
  @@index([userId, isPublic], name: "user_public_index")
  @@index([isPublic, createdAt], name: "public_created_at_index")
  @@index([userId, createdAt], name: "user_created_at_index")
  // 3. Relation-based Indexes
  @@index([tagIds], name: "tags_index")
  @@index([groupIds], name: "groups_index")
  @@index([favoritedByIds], name: "favorites_index")
  // 4. Multifield Search Optimization
  @@index([isPublic, title, description], name: "public_full_text_search_index")
  @@map("notes")
}

model Group {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  name        String          @map("group_name")
  description String          @map("group_description")
  imageUrl    String?         @map("group_image")
  avatar      String          @map("group_avatar")
  visibility  GroupVisibility @default(PRIVATE)

  // Relations
  admin   User   @relation("GroupAdmin", fields: [adminId], references: [id])
  adminId String @map("admin_id")

  members   User[]   @relation("GroupMembers", fields: [memberIds], references: [id])
  memberIds String[] @map("member_ids")

  notes   Note[]   @relation("GroupNotes", fields: [noteIds], references: [id])
  noteIds String[] @map("note_ids") @db.ObjectId

  // Group settings
  settings GroupSettings?

  // Audit
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("groups")
}

model Tag {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  slug String @unique // URL-friendly version of name

  // Relations
  notes   Note[]   @relation("NoteTags", fields: [noteIds], references: [id])
  noteIds String[] @map("note_ids") @db.ObjectId

  watchedByUsers String[] @map("watched_by_ids")

  // Metadata
  useCount Int @default(0) @map("use_count")

  @@map("tags")
}

model Keyword {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  word String @unique

  // // Relations
  // notes   Note[]   @relation("NoteKeywords", fields: [noteIds], references: [id])
  // noteIds String[] @map("note_ids") @db.ObjectId

  // Audit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("keywords")
}

// model Comment {
//   id      String @id @default(auto()) @map("_id") @db.ObjectId
//   content String

//   // Relations
//   user   User   @relation("UserComments", fields: [userId], references: [id])
//   userId String @map("user_id") @db.ObjectId
//   note   Note   @relation(fields: [noteId], references: [id])
//   noteId String @map("note_id") @db.ObjectId

//   // Threading support
//   parentId String?   @map("parent_id") @db.ObjectId
//   parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//   replies  Comment[] @relation("CommentReplies")

//   // Audit
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   deletedAt DateTime?

//   @@map("comments")
// }

// model NoteHistory {
//   id      String @id @default(auto()) @map("_id") @db.ObjectId
//   version Int
//   content String
//   title   String

//   // Relations
//   note   Note   @relation(fields: [noteId], references: [id])
//   noteId String @map("note_id") @db.ObjectId

//   // Audit
//   createdAt DateTime @default(now())

//   @@map("note_history")
// }

model UserSettings {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  theme              String  @default("light")
  emailNotifications Boolean @default(true) @map("email_notifications")
  pushNotifications  Boolean @default(true) @map("push_notifications")
  language           String  @default("en")

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  // Audit
  updatedAt DateTime @updatedAt

  @@map("user_settings")
}

model GroupSettings {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  allowInvites     Boolean @default(true) @map("allow_invites")
  allowMemberPosts Boolean @default(true) @map("allow_member_posts")

  // Relations
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String @unique @map("group_id") @db.ObjectId

  // Audit
  updatedAt DateTime @updatedAt

  @@map("group_settings")
}

model Notification {
  id      String           @id @default(auto()) @map("_id") @db.ObjectId
  type    NotificationType
  title   String
  content String
  isRead  Boolean          @default(false) @map("is_read")

  // Relations
  user   User   @relation("UserNotifications", fields: [userId], references: [id])
  userId String @map("user_id")

  // Optional related content
  noteId  String? @map("note_id") @db.ObjectId
  groupId String? @map("group_id") @db.ObjectId

  // Audit
  createdAt DateTime  @default(now())
  readAt    DateTime?

  @@map("notifications")
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

enum NoteStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum GroupVisibility {
  PUBLIC
  PRIVATE
  SECRET
}

enum NotificationType {
  NOTE_COMMENT
  NOTE_MENTION
  GROUP_INVITE
  GROUP_UPDATE
  SYSTEM
}
